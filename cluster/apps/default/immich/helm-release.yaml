---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: immich
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.7.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-charts

  driftDetection:
    mode: enabled
  maxHistory: 3
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  valuesFrom:
    - kind: Secret
      name: immich-secret
      valuesKey: IMMICH_OAUTH_CLIENT_SECRET
      targetPath: immich.oauth.clientSecret

  values:
    immich:
      # renovate: datasource=github-releases depName=immich-app/immich
      version: &immichVersion v1.133.1
      logLevel: 'log'

      concurrency:
        backgroundTask: 10
        smartSearch: 5
        metadataExtraction: 10
        faceDetection: 5
        search: 5
        sidecar: 5
        library: 5
        migration: 5
        thumbnailGeneration: 10
        videoConversion: 1
        notifications: 5

      machineLearning:
        clipModelName: ViT-B-16-SigLIP-384__webli

        duplicateDetection:
          maxDistance: 0.01 # 0.001-0.1

        facialRecognition:
          modelName: antelopev2
          minScore: 0.7 # 0-1
          maxDistance: 0.6 # 0-2
          minFaces: 4 # 2

      enablePasswordLogin: false
      oauth:
        issuerUrl: https://auth.${DOMAIN_NAME}
        clientId: immich

      ffmpeg:
        tonemap: reinhard # hable, mobius, reinhard, disabled

    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false

      securityContext:
        runAsUser: 568
        runAsGroup: 568
        runAsNonRoot: true
        fsGroup: 568
        fsGroupChangePolicy: 'OnRootMismatch'
        seccompProfile: { type: RuntimeDefault }

    controllers:
      immich:
        enabled: true
        type: deployment
        replicas: 1

        annotations:
          reloader.stakater.com/auto: 'true'

        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: *immichVersion
            env:
              TZ: ${TIMEZONE}
              NODE_ENV: &node-env production

              DB_URL:
                valueFrom:
                  secretKeyRef:
                    name: database-immich
                    key: POSTGRES_URL

            envFrom:
              - configMapRef:
                  name: &configMap immich-config

            resources:
              requests:
                gpu.intel.com/i915: 1
                cpu: 100m
                memory: 512Mi
              limits:
                gpu.intel.com/i915: 1

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ 'ALL' ] }

        pod:
          nodeSelector:
            intel.feature.node.kubernetes.io/gpu: 'true'
          securityContext:
            supplementalGroups:
              - 44
              - 109


      machine-learning:
        enabled: true
        type: deployment

        annotations:
          reloader.stakater.com/auto: 'true'

        pod:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: node-role.kubernetes.io/control-plane
                        operator: DoesNotExist

        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: *immichVersion

            env:
              TZ: ${TIMEZONE}
              NODE_ENV: *node-env
              MACHINE_LEARNING_CACHE_FOLDER: /cache

              MACHINE_LEARNING_PRELOAD__CLIP:
                value: '{{ .Values.immich.machineLearning.clipModelName }}'
              MACHINE_LEARNING_PRELOAD__FACIAL_RECOGNITION:
                value: '{{ .Values.immich.machineLearning.facialRecognition.modelName }}'

            envFrom:
              - configMapRef:
                  name: *configMap

            resources:
              requests:
                cpu: 100m
                memory: 2500Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ 'ALL' ] }

    service:
      app:
        controller: immich
        ports:
          http:
            port: 2283

      machine-learning:
        controller: machine-learning
        ports:
          http:
            port: 3003

    ingress:
      app:
        className: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: network-system-authelia-auth@kubernetescrd
          hajimari.io/icon: mdi:camera
        hosts:
          - host: photos.${DOMAIN_NAME}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http

    persistence:
      settings:
        type: configMap
        name: immich-settings
        advancedMounts:
          immich:
            app:
              - path: /usr/src/app/immich-config.yaml
                subPath: immich-config.yaml

      library:
        existingClaim: immich-data
        globalMounts:
          - path: /usr/src/app/upload

      modelcache:
        type: persistentVolumeClaim
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 10Gi
        retain: true
        advancedMounts:
          machine-learning:
            app:
              - path: /cache

      tmp:
        type: emptyDir
        advancedMounts:
          machine-learning:
            app:
              - path: /tmp

    configMaps:
      config:
        enabled: true
        data:
          LOG_LEVEL: '{{ .Values.immich.logLevel }}'
          NODE_ENV: 'production'

          REDIS_HOSTNAME: immich-dragonfly
          REDIS_PORT: '6379'

          IMMICH_CONFIG_FILE: /usr/src/app/immich-config.yaml

          IMMICH_SERVER_URL: http://immich-app:3001
          IMMICH_MACHINE_LEARNING_URL: http://immich-machine-learning:3003

          TRANSFORMERS_CACHE: /usr/src/app/.transformers_cache

      settings:
        enabled: true
        data:
          # Follow https://github.com/immich-app/immich/blob/main/server/src/config.ts
          # https://github.com/immich-app/immich/blob/main/docs/docs/install/config-file.md
          immich-config.yaml: |
            ---
            ffmpeg:
              crf: 23
              threads: 0
              preset: ultrafast
              targetVideoCodec: h264
              acceptedVideoCodecs:
                - h264
              targetAudioCodec: aac
              acceptedAudioCodecs:
                - aac
                - mp3
                - libopus
              acceptedContainers:
                - mov
                - ogg
                - webm
              targetResolution: '720'
              maxBitrate: '0'
              bframes: -1
              refs: 0
              gopSize: 0
              temporalAQ: false
              cqMode: auto
              twoPass: false
              preferredHwDevice: auto
              transcode: required
              tonemap: {{ .Values.immich.ffmpeg.tonemap | quote }}
              accel: disabled
              accelDecode: false

            backup:
              database:
                enabled: false

            job:
              backgroundTask:
                concurrency: {{ .Values.immich.concurrency.backgroundTask }}
              smartSearch:
                concurrency: {{ .Values.immich.concurrency.smartSearch }}
              metadataExtraction:
                concurrency: {{ .Values.immich.concurrency.metadataExtraction }}
              faceDetection:
                concurrency: {{ .Values.immich.concurrency.faceDetection }}
              search:
                concurrency: {{ .Values.immich.concurrency.search }}
              sidecar:
                concurrency: {{ .Values.immich.concurrency.sidecar }}
              library:
                concurrency: {{ .Values.immich.concurrency.library }}
              migration:
                concurrency: {{ .Values.immich.concurrency.migration }}
              thumbnailGeneration:
                concurrency: {{ .Values.immich.concurrency.thumbnailGeneration }}
              videoConversion:
                concurrency: {{ .Values.immich.concurrency.videoConversion }}
              notifications:
                concurrency: {{ .Values.immich.concurrency.notifications }}

            logging:
              enabled: true
              level: {{ .Values.immich.logLevel | quote }}

            machineLearning:
              enabled: true
              url: http://immich-machine-learning:3003
              clip:
                enabled: true
                modelName: {{ .Values.immich.machineLearning.clipModelName | quote }}
              duplicateDetection:
                enabled: true
                maxDistance: {{ .Values.immich.machineLearning.duplicateDetection.maxDistance }}
              facialRecognition:
                enabled: true
                modelName: {{ .Values.immich.machineLearning.facialRecognition.modelName | quote }}
                minScore: {{ .Values.immich.machineLearning.facialRecognition.minScore }}
                maxDistance: {{ .Values.immich.machineLearning.facialRecognition.maxDistance }}
                minFaces: {{ .Values.immich.machineLearning.facialRecognition.minFaces }}

            map:
              enabled: true
              lightStyle: 'https://tiles.immich.cloud/v1/style/light.json'
              darkStyle: 'https://tiles.immich.cloud/v1/style/dark.json'

            reverseGeocoding:
              enabled: true

            oauth:
              autoLaunch: false
              autoRegister: true
              buttonText: Login with OAuth
              enabled: true
              issuerUrl: {{ .Values.immich.oauth.issuerUrl | quote }}
              clientId: {{ .Values.immich.oauth.clientId | quote }}
              clientSecret: {{ .Values.immich.oauth.clientSecret | quote }}
              signingAlgorithm: RS256
              mobileOverrideEnabled: false
              mobileRedirectUri: ''
              scope: openid profile email
              storageLabelClaim: preferred_username
              storageQuotaClaim: immich_quota
              defaultStorageQuota: 0

            passwordLogin:
              enabled: {{ .Values.immich.enablePasswordLogin }}

            storageTemplate:
              enabled: true
              hashVerificationEnabled: true
              template: "{{ "{{" }}y{{ "}}" }}/{{ "{{" }}y{{ "}}" }}-{{ "{{" }}MM{{ "}}" }}-{{ "{{" }}dd{{ "}}" }}/{{ "{{" }}filename{{ "}}" }}"

            image:
              thumbnail:
                format: webp
                size: 250
                quality: 80
              preview:
                format: jpeg
                size: 1440
                quality: 80
              colorspace: p3
              extractEmbedded: false

            newVersionCheck:
              enabled: false

            trash:
              enabled: true
              days: 30

            theme:
              customCss: ''

            library:
              scan:
                enabled: true
                cronExpression: 0 0 * * *
              watch:
                enabled: false

            server:
              externalDomain: ''
              loginPageMessage: ''

            notifications:
              smtp:
                enabled: false
                from: ''
                replyTo: ''
                transport:
                  ignoreCert: false
                  host: ''
                  port: 587
                  username: ''
                  password: ''

            user:
              deleteDelay: 7
