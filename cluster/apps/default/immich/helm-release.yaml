---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: immich
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.2.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-charts

  driftDetection:
    mode: enabled
  maxHistory: 3
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  valuesFrom:
    - kind: Secret
      name: immich-secret
      valuesKey: IMMICH_OAUTH_CLIENT_SECRET
      targetPath: immich.oauth.clientSecret

  values:
    immich:
      # renovate: datasource=github-releases depName=immich-app/immich
      version: &immichVersion v1.109.2
      logLevel: 'log'

      concurrency:
        backgroundTask: 10
        smartSearch: 5
        metadataExtraction: 10
        faceDetection: 5
        search: 5
        sidecar: 5
        library: 5
        migration: 5
        thumbnailGeneration: 10
        videoConversion: 1

      machineLearning:
        clipModelName: ViT-B-32__openai
        facialRecognitionModelName: antelopev2

      enablePasswordLogin: false
      oauth:
        issuerUrl: https://auth.${DOMAIN_NAME}
        clientId: immich

    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false

      securityContext:
        runAsUser: 568
        runAsGroup: 568
        runAsNonRoot: true
        fsGroup: 568
        fsGroupChangePolicy: 'OnRootMismatch'
        seccompProfile: { type: RuntimeDefault }

    controllers:
      immich:
        enabled: true
        type: deployment
        replicas: 1

        annotations:
          configmap.reloader.stakater.com/reload: &config immich-config, immich-settings
          secret.reloader.stakater.com/reload: &secret immich-secret

        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: *immichVersion
            env:
              TZ: ${TIMEZONE}
              NODE_ENV: &node-env production

              DB_URL:
                valueFrom:
                  secretKeyRef:
                    name: database-immich
                    key: POSTGRES_URL

            envFrom:
              - configMapRef:
                  name: &configMap immich-config

            resources:
              requests:
                gpu.intel.com/i915: 1
                cpu: 100m
                memory: 512Mi
              limits:
                gpu.intel.com/i915: 1

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ 'ALL' ] }

        pod:
          nodeSelector:
            intel.feature.node.kubernetes.io/gpu: 'true'
          securityContext:
            supplementalGroups:
              - 44
              - 109


      machine-learning:
        enabled: true
        type: deployment

        annotations:
          configmap.reloader.stakater.com/reload: *config
          secret.reloader.stakater.com/reload: *secret

        pod:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: node-role.kubernetes.io/control-plane
                        operator: DoesNotExist

        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: *immichVersion

            env:
              TZ: ${TIMEZONE}
              NODE_ENV: *node-env
              MACHINE_LEARNING_CACHE_FOLDER: /cache

            envFrom:
              - configMapRef:
                  name: *configMap

            resources:
              requests:
                cpu: 100m
                memory: 384Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ 'ALL' ] }

    service:
      app:
        controller: immich
        ports:
          http:
            port: 3001

      machine-learning:
        controller: machine-learning
        ports:
          http:
            port: 3003

    ingress:
      app:
        className: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: network-system-authelia-auth@kubernetescrd
          hajimari.io/icon: mdi:camera
        hosts:
          - host: photos.${DOMAIN_NAME}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http

    persistence:
      settings:
        type: configMap
        name: immich-settings
        advancedMounts:
          immich:
            app:
              - path: /usr/src/app/immich-config.json
                subPath: immich-config.json

      library:
        existingClaim: immich-data
        globalMounts:
          - path: /usr/src/app/upload

      modelcache:
        type: persistentVolumeClaim
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 10Gi
        retain: true
        advancedMounts:
          machine-learning:
            app:
              - path: /cache

      tmp:
        type: emptyDir
        advancedMounts:
          machine-learning:
            app:
              - path: /tmp

    configMaps:
      config:
        enabled: true
        data:
          LOG_LEVEL: '{{ .Values.immich.logLevel }}'
          NODE_ENV: 'production'

          REDIS_HOSTNAME: immich-dragonfly
          REDIS_PORT: '6379'

          IMMICH_CONFIG_FILE: /usr/src/app/immich-config.json

          IMMICH_SERVER_URL: http://immich-app:3001
          IMMICH_MACHINE_LEARNING_URL: http://immich-machine-learning:3003

          TRANSFORMERS_CACHE: /usr/src/app/.transformers_cache

      settings:
        enabled: true
        data:
          immich-config.json: |
            {
              "ffmpeg": {
                "crf": 23,
                "threads": 0,
                "preset": "ultrafast",
                "targetVideoCodec": "h264",
                "acceptedVideoCodecs": ["h264"],
                "targetAudioCodec": "aac",
                "acceptedAudioCodecs": ["aac", "mp3", "libopus"],
                "targetResolution": "720",
                "maxBitrate": "0",
                "bframes": -1,
                "refs": 0,
                "gopSize": 0,
                "npl": 0,
                "temporalAQ": false,
                "cqMode": "auto",
                "twoPass": false,
                "preferredHwDevice": "auto",
                "transcode": "required",
                "tonemap": "hable",
                "accel": "disabled"
              },

              "job": {
                "backgroundTask": {
                  "concurrency": {{ .Values.immich.concurrency.backgroundTask }}
                },
                "smartSearch": {
                  "concurrency": {{ .Values.immich.concurrency.smartSearch }}
                },
                "metadataExtraction": {
                  "concurrency": {{ .Values.immich.concurrency.metadataExtraction }}
                },
                "faceDetection": {
                  "concurrency": {{ .Values.immich.concurrency.faceDetection }}
                },
                "search": {
                  "concurrency": {{ .Values.immich.concurrency.search }}
                },
                "sidecar": {
                  "concurrency": {{ .Values.immich.concurrency.sidecar }}
                },
                "library": {
                  "concurrency": {{ .Values.immich.concurrency.library }}
                },
                "migration": {
                  "concurrency": {{ .Values.immich.concurrency.migration }}
                },
                "thumbnailGeneration": {
                  "concurrency": {{ .Values.immich.concurrency.thumbnailGeneration }}
                },
                "videoConversion": {
                  "concurrency": {{ .Values.immich.concurrency.videoConversion }}
                }
              },

              "logging": {
                "enabled": true,
                "level": {{ .Values.immich.logLevel | quote }}
              },

              "machineLearning": {
                "enabled": true,
                "url": "http://immich-machine-learning:3003",
                "clip": {
                  "enabled": true,
                  "modelName": {{ .Values.immich.machineLearning.clipModelName | quote }}
                },
                "duplicateDetection": {
                  "enabled": true,
                  "maxDistance": 0.03
                },
                "facialRecognition": {
                  "enabled": true,
                  "modelName": {{ .Values.immich.machineLearning.facialRecognitionModelName | quote }},
                  "minScore": 0.7,
                  "maxDistance": 0.6,
                  "minFaces": 2
                },
              },
              "map": {
                "enabled": true,
                "lightStyle": "",
                "darkStyle": ""
              },
              "reverseGeocoding": {
                "enabled": true
              },
              "oauth": {
                "enabled": true,
                "issuerUrl": {{ .Values.immich.oauth.issuerUrl | quote }},
                "clientId": {{ .Values.immich.oauth.clientId | quote }},
                "clientSecret": {{ .Values.immich.oauth.clientSecret | quote }},
                "signingAlgorithm": "RS256",
                "mobileOverrideEnabled": false,
                "mobileRedirectUri": "",
                "scope": "openid profile email",
                "storageLabelClaim": "preferred_username",
                "storageQuotaClaim": "immich_quota",
                "defaultStorageQuota": 0,
                "buttonText": "Login with OAuth",
                "autoRegister": true,
                "autoLaunch": false
              },
              "passwordLogin": {
                "enabled": {{ .Values.immich.enablePasswordLogin }}
              },
              "storageTemplate": {
                "enabled": true,
                "hashVerificationEnabled": true,
                "template": "{{ "{{" }}y{{ "}}" }}/{{ "{{" }}y{{ "}}" }}-{{ "{{" }}MM{{ "}}" }}-{{ "{{" }}dd{{ "}}" }}/{{ "{{" }}filename{{ "}}" }}"
              },
              "newVersionCheck": {
                "enabled": true
              },
              "trash": {
                "enabled": true,
                "days": 30
              },
              "theme": {
                "customCss": ""
              },

              "library": {
                "scan": {
                  "enabled": true,
                  "cronExpression": "0 0 * * *"
                },
                "watch": {
                  "enabled": false,
                  "usePolling": false,
                  "interval": 10000
                }
              },
              "user": {
                "deleteDelay": 7
              },
              "image": {
                "thumbnailFormat": "webp",
                "thumbnailSize": 250,
                "previewFormat": "jpeg",
                "previewSize": 1440,
                "quality": 80,
                "colorspace": "p3",
                "extractEmbedded": false
              },
            }
