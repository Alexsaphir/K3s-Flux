---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: netbox
spec:
  interval: 15m
  chart:
    spec:
      chart: netbox
      version: 4.1.1
      sourceRef:
        kind: HelmRepository
        name: bootc
        namespace: flux-charts
      interval: 15m

  driftDetection:
    mode: enabled
  maxHistory: 3
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  valuesFrom:
    - targetPath: storageConfig.AWS_ACCESS_KEY_ID
      kind: Secret
      name: netbox-s3-secret
      valuesKey: AWS_ACCESS_KEY_ID
    - targetPath: storageConfig.AWS_SECRET_ACCESS_KEY
      kind: Secret
      name: netbox-s3-secret
      valuesKey: AWS_SECRET_ACCESS_KEY
    - targetPath: storageConfig.AWS_S3_ENDPOINT_URL
      kind: Secret
      name: netbox-s3-secret
      valuesKey: AWS_ENDPOINT
    - targetPath: storageConfig.AWS_S3_REGION_NAME
      kind: Secret
      name: netbox-s3-secret
      valuesKey: AWS_REGION_NAME

    - targetPath: externalDatabase.host
      kind: Secret
      name: database-netbox
      valuesKey: HOST
    - targetPath: externalDatabase.database
      kind: Secret
      name: database-netbox
      valuesKey: DATABASE_NAME
    - targetPath: externalDatabase.username
      kind: Secret
      name: database-netbox
      valuesKey: LOGIN
    - targetPath: remoteAuth.ldap
      kind: Secret
      name: database-netbox
      valuesKey: LOGIN

  # https://github.com/bootc/netbox-chart/blob/develop/values.yaml
  values:
    debug: false

    replicaCount: 1

    image:
      repository: ghcr.io/netbox-community/netbox
      tag: v4.0.8

    housekeeping:
      enabled: false

    worker:
      enabled: false

    #    extraEnvs:
    #      - name: DJANGO_LOG_LEVEL
    #        value: DEBUG
    #      - name: DEBUG
    #        value: 'true'
    #      - name: REMOTE_AUTH_ENABLED
    #        value: 'True'
    #      - name: REMOTE_AUTH_BACKEND
    #        value: 'netbox.authentication.LDAPBackend'
    #      - name: AUTH_LDAP_SERVER_URI
    #        value: 'ldap://glauth.kube-auth.svc.cluster.local:389'
    #      - name: AUTH_LDAP_BIND_DN
    #        value: 'cn=netbox,ou=services,dc=domain,dc=com'
    #      - name: AUTH_LDAP_BIND_PASSWORD
    #        valueFrom:
    #          secretKeyRef:
    #            name: netbox-secret
    #            key: ldap_bind_password
    #      - name: AUTH_LDAP_USER_SEARCH_BASEDN
    #        value: 'ou=people,ou=users,dc=home,dc=arpa'
    #      - name: AUTH_LDAP_GROUP_SEARCH_BASEDN
    #        value: 'ou=groups,dc=home,dc=arpa'
    #      - name: AUTH_LDAP_REQUIRE_GROUP_DN
    #        value: 'cn=netbox" # or "cn=netbox,ou=groups,dc=domain,dc=com"
    #      - name: AUTH_LDAP_IS_ADMIN_DN
    #        value: "cn=netbox-admin,ou=groups,dc=home,dc=arpa"
    #      - name: AUTH_LDAP_IS_SUPERUSER_DN
    #        value: "cn=netbox-superuser,ou=groups,dc=home,dc=arpa"
    #      - name: AUTH_LDAP_USER_SEARCH_ATTR
    #        value: "uid"
    #      - name: AUTH_LDAP_GROUP_SEARCH_CLASS
    #        value: "groupOfUniqueNames"
    #      - name: AUTH_LDAP_GROUP_TYPE
    #        value: "GroupOfUniqueNamesType"
    #      - name: AUTH_LDAP_ATTR_LASTNAME
    #        value: "sn"
    #      - name: AUTH_LDAP_ATTR_FIRSTNAME
    #        value: "givenName"
    #      - name: LDAP_IGNORE_CERT_ERRORS
    #        value: "false"


    #    logging:
    #      disable_existing_loggers: false
    #      handlers:
    #        netbox_auth_log:
    #          level: DEBUG
    #          class: logging.FileHandler
    #          filename: '/tmp/django-ldap-debug.log'
    #
    #      loggers:
    #        #        django:
    #        #          handlers:
    #        #            - netbox_auth_log
    #        #          level: DEBUG
    #        netbox.authentication.*:
    #          handlers:
    #            - netbox_auth_log
    #          level: DEBUG
    #        django_auth_ldap:
    #          handlers:
    #            - netbox_auth_log
    #          level: DEBUG
    #      version: 1

    #    remoteAuth:
    #      enabled: true
    #      backend: netbox.authentication.LDAPBackend
    #      ldap:
    #        serverUri: "ldap://glauth.kube-auth.svc.cluster.local:389"
    #        startTls: false
    #        ignoreCertErrors: false
    #        bindDn: 'cn=search_netbox,ou=svcaccts,dc=home,dc=arpa'
    #
    #        userSearchBaseDn: 'ou=people,ou=users,dc=home,dc=arpa'
    #        userSearchAttr: 'uid'
    #
    #        groupSearchBaseDn: 'ou=groups,dc=home,dc=arpa'
    #        groupSearchClass: 'groupOfUniqueNames'
    #
    #        groupType: 'GroupOfUniqueNamesType'
    #        requireGroupDn: 'ou=netbox'
    #        findGroupPerms: true
    #
    #        mirrorGroups: true
    #        # mirrorGroupsExcept: null
    #        cacheTimeout: 3600
    #
    #        isAdminDn: 'cn=netbox-admin'
    #        isSuperUserDn: 'cn=netbox-superuser'
    #
    #        attrFirstName: 'givenName'
    #        attrLastName: 'sn'
    #        attrMail: 'mail'

    # plugins:
    #  - netbox_topology_views
    #  - netbox_ipcalculator
    #  - netbox_secretstore
    #  - nextbox_ui_plugin
    #  - netbox_qrcode
    #  - netbox_bgp

    existingSecret: netbox-secret

    superuser:
      name: admin
    napalm:
      username: napalm

    preferIPv4: true
    timeZone: "${TIMEZONE}"
    powerFeedDefaultAmperage: 15
    powerFeedDefaultVoltage: 230
    powerFeedMaxUtilisation: 80

    persistence:
      enabled: false
    reportsPersistence:
      enabled: false

    storageBackend: storages.backends.s3boto3.S3Boto3Storage
    storageConfig:
      AWS_STORAGE_BUCKET_NAME: netbox
      AWS_S3_ADDRESSING_STYLE: path

    postgresql:
      enabled: false
    externalDatabase:
      port: 5432
      existingSecretName: database-netbox
      existingSecretKey: PASSWORD

    redis:
      enabled: false

    tasksRedis:
      database: 0

      host: netbox-dragonfly
      port: 6379
      username: ""

      existingSecretName: netbox-redis-secret
      existingSecretKey: password

    cachingRedis:
      database: 1

      host: netbox-dragonfly
      port: 6379
      username: ""

      existingSecretName: netbox-redis-secret
      existingSecretKey: password

    email:
      server: mailpit.mail.svc.cluster.local
      port: 1025
      username: ''
      password: ''
      useSSL: false
      useTLS: false
      sslCertFile: ''
      sslKeyFile: ''
      timeout: 10  # seconds
      from: 'Netbox <netbox@domain.com>'

    podAnnotations:
      secret.reloader.stakater.com/reload: "netbox-secret,netbox-s3-secret,netbox-redis-secret"
      config.reloader.stakater.com/reload: netbox

    csrf:
      cookieName: csrftoken
      trustedOrigins:
        - https://netbox.${DOMAIN_NAME}

    ingress:
      enabled: true
      className: traefik
      annotations:
        traefik.ingress.kubernetes.io/router.middlewares: network-system-authelia-auth@kubernetescrd
        hajimari.io/enable: 'true'
        hajimari.io/icon: mdi:rhombus-split
      hosts:
        - host: &hostname netbox.${DOMAIN_NAME}
          paths:
            - /

    allowedHosts:
      - *hostname

    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/instance: netbox
                app.kubernetes.io/name: netbox
                app.kubernetes.io/component: netbox
            topologyKey: kubernetes.io/hostname
