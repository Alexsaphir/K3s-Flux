---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: lidarr
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-charts

  driftDetection:
    mode: enabled
  maxHistory: 3
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  dependsOn:
    - name: prowlarr

  values:
    defaultPodOptions:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    controllers:
      lidarr:
        annotations:
          reloader.stakater.com/auto: 'true'

        containers:
          app:
            image:
              repository: ghcr.io/larivierec/lidarr
              tag: 2.9.5.4550@sha256:33bafe73e17fd2c2c5585186e746e9f46c77b030960b073a293428b383ab2f76

            env:
              LIDARR__AUTHENTICATION_METHOD: External
              LIDARR__AUTHENTICATION_REQUIRED: Enabled
              LIDARR__APP__INSTANCENAME: Lidarr
              LIDARR__SERVER__PORT: &port 8686
              LIDARR__LOG__LEVEL: info
              LIDARR__APP__THEME: light
              LIDARR__LOG__ANALYTICSENABLED: 'false'

              LIDARR__AUTH__APIKEY: &apikey
                valueFrom:
                  secretKeyRef:
                    name: lidarr-secret
                    key: api_key

              TZ: ${TIMEZONE}

            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5

            resources:
              requests:
                cpu: 10m
                memory: 256Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ 'ALL' ] }

          metrics:
            dependsOn: app
            image:
              repository: ghcr.io/onedr0p/exportarr
              tag: v2.0.1

            args: [ 'lidarr' ]

            env:
              PORT: &metricsPort 9707
              URL: 'http://{{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.app.ports.http.port }}'
              APIKEY: *apikey
              ENABLE_ADDITIONAL_METRICS: true
              LOG_LEVEL: warn

            resources:
              requests:
                cpu: 10m
                memory: 100Mi
              limits:
                memory: 125Mi

    service:
      app:
        primary: true
        controller: lidarr
        ports:
          http:
            port: *port
      metrics:
        nameOverride: metrics
        controller: lidarr
        ports:
          metrics:
            port: *metricsPort

    serviceMonitor:
      metrics:
        enabled: true
        serviceName: lidarr-metrics
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 10m
            scrapeTimeout: 2m

    ingress:
      app:
        className: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: network-system-authelia-auth@kubernetescrd
          hajimari.io/enable: 'true'
          hajimari.io/icon: mdi:headphones
        hosts:
          - host: '{{ .Release.Name }}.${DOMAIN_NAME}'
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      config:
        enabled: true
        existingClaim: readarr

      tmp:
        type: emptyDir

      media:
        enabled: true
        type: nfs
        server: '192.168.0.130'
        path: /mnt/user/Media
        globalMounts:
          - path: /media
            readOnly: true
