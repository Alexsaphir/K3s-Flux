---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: flux-monitoring
spec:
  interval: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 43.1.4
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-charts
      interval: 15m

  install:
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    crds: CreateReplace
    remediation:
      retries: 3

  dependsOn:
    - name: kube-prometheus-stack-crds
      namespace: flux-system

    - name: longhorn
      namespace: longhorn-system

  # https://github.com/prometheus-community/helm-charts/blob/kube-prometheus-stack-42.3.0/charts/kube-prometheus-stack/values.yaml
  values:
    fullnameOverride: prometheus

    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: true
        configReloaders: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverSlos: true
        kubelet: true
        kubeProxy: false
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: false
        kubeStateMetrics: true
        network: true
        node: true
        nodeExporterAlerting: true
        nodeExporterRecording: true
        prometheus: true
        prometheusOperator: true

    admissionWebhooks:
      certManager:
        enabled: true

    coreDns:
      enabled: true

    kubeControllerManager:
      enabled: false
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    kubeEtcd:
      enabled: false

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeApiServer:
      enabled: true

    kubeProxy:
      enabled: false
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    kubeScheduler:
      enabled: false
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true

    kubeStateMetrics:
      enabled: true


    kube-state-metrics:
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - persistentvolumeclaims=[*]
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    alertmanager:
      ingress:
        enabled: false
        annotations:
          kubernetes.io/ingress.class: traefik
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "traefik-system-internal@kubernetescrd"
        hosts:
          - "alerts.monitoring.${SECRET_DOMAIN_NAME}"
        path: /
        pathType: Prefix
      config:
        global:
          resolve_timeout: 5m
        route:
          group_by: [ "alertname", "job" ]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "null"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog|CPUThrottlingHigh"
              continue: false
        receivers:
          - name: "null"
        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            equal: [ "alertname", "namespace" ]
        templates:
          - /etc/alertmanager/config/*.tmpl
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 1Gi

    nodeExporter:
      enabled: true
      serviceMonitor:
        https: false
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node

    prometheus-node-exporter:
      fullnameOverride: node-exporter
      tolerations:
        - effect: "NoExecute"
          operator: "Exists"
        - effect: "NoSchedule"
          operator: "Exists"
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 60
              preference:
                matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      - i386
                      - i686
                      - x86

    prometheusOperator:
      createCustomResource: true
      prometheusConfigReloader:
        resources:
          requests:
            cpu: 100m
            memory: 50Mi
          limits:
            cpu: 200m
            memory: 100Mi

    prometheus:
      ingress:
        enabled: false
        annotations:
          kubernetes.io/ingress.class: traefik
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
          traefik.ingress.kubernetes.io/router.middlewares: "traefik-system-internal@kubernetescrd"
        hosts:
          - "prometheus.monitoring.${SECRET_DOMAIN_NAME}"
        path: /
        pathType: Prefix
      thanosService:
        enabled: false
      thanosServiceMonitor:
        enabled: false
      prometheusSpec:
        replicas: 1
        podAntiAffinity: hard
        retentionSize: "8GB"
        replicaExternalLabelName: "replica"
        ruleSelector: { }
        ruleNamespaceSelector: { }
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: { }
        serviceMonitorNamespaceSelector: { }
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: { }
        podMonitorNamespaceSelector: { }
        podMonitorSelectorNilUsesHelmValues: false
        retention: 2d
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 10Gi

#        addtionalScrapeConfigs:
#          - job_name: "coredns"
#            honor_timestamps: true
#            static_configs:
#              - targets:
#                  - "kube-dns.kube-system:9153"


    #        thanos:
    #          image: quay.io/thanos/thanos:v0.28.0
    #          # renovate: datasource=docker depName=quay.io/thanos/thanos
    #          version: v0.27.0
    #          objectStorageConfig:
    #            name: thanos-objstore-secret
    #            key: objstore.yml

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Prometheus
