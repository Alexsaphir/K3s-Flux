# yaml-language-server: $schema=https://raw.githubusercontent.com/authelia/authelia/master/docs/static/schemas/v4.38/json-schema/configuration.json
---
log:
  level: info
  # format: json

notifier:
  disable_startup_check: true
  filesystem:
    filename: /tmp/notification.txt

authentication_backend:
  refresh_interval: 1m
  password_reset:
    disable: true

  ldap:
    implementation: custom
    timeout: 5s
    start_tls: false
    base_dn: dc=home,dc=arpa
    additional_users_dn: ou=people
    users_filter: (&({username_attribute}={input})(objectClass=person))

    additional_groups_dn: ou=groups
    groups_filter: (member={dn})
    group_search_mode: filter

    user: uid=search,ou=people,dc=home,dc=arpa

    attributes:
      username: uid
      display_name: displayName
      mail: mail
      member_of: memberOf
      group_name: cn

totp:
  disable: false
  issuer: auth.${SECRET_DOMAIN_NAME}

webauthn:
  disable: true

duo_api:
  disable: true

regulation:
  max_retries: 3
  find_time: 2m
  ban_time: 5m

session:
  same_site: lax
  inactivity: 5m
  expiration: 1h
  remember_me: 1M
  cookies:
    - name: authelia-k3s
      domain: ${SECRET_DOMAIN_NAME}
      authelia_url: https://auth.${SECRET_DOMAIN_NAME}
      default_redirection_url: https://${SECRET_DOMAIN_NAME}
  redis:
    host: authelia-dragonfly.kube-auth.svc.cluster.local
    database_index: 0

access_control:
  default_policy: deny
  networks:
    - name: internal
      networks: [ '192.168.0.0/16' ]

  rules:
    - domain:
        - 'auth.${SECRET_DOMAIN_NAME}'
      policy: bypass

    # Expose public metrics
    - domain:
        - 'kromgo.${SECRET_DOMAIN_NAME}'
        - 'status.${SECRET_DOMAIN_NAME}'
      policy: bypass

    # Public media ingresses
    - domain:
        - 'plex.${SECRET_DOMAIN_NAME}'
        - 'tautulli.${SECRET_DOMAIN_NAME}'
        - 'ombi.${SECRET_DOMAIN_NAME}'
      policy: bypass

    # Minio
    - domain:
        - 'minio.${SECRET_DOMAIN_NAME}'
        - 's3.${SECRET_DOMAIN_NAME}'
      policy: bypass


    # Public ingresses behind sso
    - domain:
        - 'photos.${SECRET_DOMAIN_NAME}'
        - 'recipes.${SECRET_DOMAIN_NAME}'
        - 'foundry.${SECRET_DOMAIN_NAME}'

        - 'codecov.${SECRET_DOMAIN_NAME}'
        - 'sonarqube.${SECRET_DOMAIN_NAME}'

        - 'planka.${SECRET_DOMAIN_NAME}'
        - 'plan.${SECRET_DOMAIN_NAME}'

        - 'coder.${SECRET_DOMAIN_NAME}'
        - 'jupyter.${SECRET_DOMAIN_NAME}'
      policy: bypass

    # Webhook protected by secret
    - domain:
        - 'atlantis.${SECRET_DOMAIN_NAME}'
      policy: bypass
      resources:
        - '^/events([/?].*)?$'
    - domain:
        - 'flux-receiver.${SECRET_DOMAIN_NAME}'
      policy: bypass
    - domain:
        - 'renovate.${SECRET_DOMAIN_NAME}'
      policy: bypass
      resources:
        - '^/webhook([/?].*)?$'

    # Ingress for media protected by authelia
    - domain:
        - 'cleanarr.${SECRET_DOMAIN_NAME}'
        - 'prowlarr.${SECRET_DOMAIN_NAME}'
        - 'recyclarr.${SECRET_DOMAIN_NAME}'
        - 'sonarr.${SECRET_DOMAIN_NAME}'
        - 'radarr.${SECRET_DOMAIN_NAME}'
        - 'lidarr.${SECRET_DOMAIN_NAME}'
        - 'readarr.${SECRET_DOMAIN_NAME}'
      policy: two_factor
      subject:
        - 'group:authelia-media-automation'

    # Apps for authenticated users
    - domain:
        - 'cyberchef.${SECRET_DOMAIN_NAME}'
        - 'actual.${SECRET_DOMAIN_NAME}'
        - 'zitadel.${SECRET_DOMAIN_NAME}'
      policy: two_factor

    # Ingresses for gitlab
    - domain:
        - 'workspace.${SECRET_DOMAIN_NAME}'
        - '*.workspace.${SECRET_DOMAIN_NAME}'
      policy: bypass

    - domain:
        - 'hajimari.${SECRET_DOMAIN_NAME}'
      policy: two_factor

    - domain:
        - 'gitops.${SECRET_DOMAIN_NAME}'
        - 'lldap.${SECRET_DOMAIN_NAME}'
        - 'longhorn.${SECRET_DOMAIN_NAME}'
        - 'netbox.${SECRET_DOMAIN_NAME}'
        - 'portainer.${SECRET_DOMAIN_NAME}'
        - 'grafana.${SECRET_DOMAIN_NAME}'
        - 'atlantis.${SECRET_DOMAIN_NAME}'
      policy: two_factor
      subject:
        - 'group:cluster-admins'

    - domain:
        - '*.monitoring.${SECRET_DOMAIN_NAME}'
      policy: two_factor
      subject:
        - 'group:cluster-admins-analytics'

    - domain:
        - '*.${SECRET_DOMAIN_NAME}'
        - '*.monitoring.${SECRET_DOMAIN_NAME}'
      policy: deny

identity_providers:
  oidc:
    cors:
      endpoints: [ 'authorization', 'token', 'revocation', 'introspection' ]
      allowed_origins_from_client_redirect_uris: true
    clients:
      - client_id: grafana
        client_name: Grafana
        client_secret: "${GRAFANA_OAUTH_CLIENT_SECRET}"
        public: false
        authorization_policy: two_factor
        pre_configured_consent_duration: 1y
        scopes: [ 'openid', 'profile', 'groups', 'email' ]
        redirect_uris:
          [ 'https://grafana.${SECRET_DOMAIN_NAME}/login/generic_oauth' ]
        userinfo_signed_response_alg: none

      - client_id: immich
        client_name: Immich
        client_secret: "${IMMICH_OAUTH_CLIENT_SECRET}"
        public: false
        authorization_policy: two_factor
        pre_configured_consent_duration: 1y
        scopes: [ 'openid', 'profile', 'email' ]
        redirect_uris:
          - 'https://photos.${SECRET_DOMAIN_NAME}/auth/login'
          - 'https://photos.${SECRET_DOMAIN_NAME}/user-settings'
          - 'app.immich:/'
        userinfo_signed_response_alg: none

      - client_id: weave-gitops
        client_name: Weave GitOps
        client_secret: "${WEAVE_GITOPS_OAUTH_CLIENT_SECRET}"
        public: false
        authorization_policy: two_factor
        pre_configured_consent_duration: 1y
        scopes: [ 'openid', 'profile', 'groups', 'email' ]
        redirect_uris: [ 'https://gitops.${SECRET_DOMAIN_NAME}/oauth2/callback' ]
        userinfo_signed_response_alg: none

      - client_id: portainer
        client_name: Portainer
        client_secret: "${PORTAINER_OAUTH_CLIENT_SECRET}"
        public: false
        authorization_policy: two_factor
        pre_configured_consent_duration: 1y
        scopes: [ 'openid', 'profile', 'groups', 'email' ]
        redirect_uris: [ 'https://portainer.${SECRET_DOMAIN_NAME}' ]
        userinfo_signed_response_alg: none

      - client_id: minio
        client_name: Minio
        client_secret: "${MINIO_OAUTH_CLIENT_SECRET}"
        public: false
        authorization_policy: two_factor
        pre_configured_consent_duration: 1y
        scopes: [ 'openid', 'profile', 'groups', 'email' ]
        redirect_uris: [ 'https://minio.${SECRET_DOMAIN_NAME}/oauth_callback' ]
        userinfo_signed_response_alg: none

      - client_id: planka
        client_name: Planka
        client_secret: "${PLANKA_OAUTH_CLIENT_SECRET}"
        public: false
        authorization_policy: two_factor
        pre_configured_consent_duration: 1y
        scopes: [ 'openid', 'profile', 'groups', 'email' ]
        redirect_uris: [ 'https://planka.${SECRET_DOMAIN_NAME}/oidc-callback' ]
        userinfo_signed_response_alg: none
        response_modes:
          - fragment
